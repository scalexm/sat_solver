/*
 *  expr/detail/parser.ypp
 *  solver
 *
 *  Created by Alexandre Martin on 03/02/2016.
 *  Copyright Â© 2016 scalexm. All rights reserved.
 *
 */

%skeleton "lalr1.cc"
%require "3.0.2"
%defines
%define api.namespace { expr::detail }
%define parser_class_name { parser }

%define api.token.constructor
%define api.value.type variant

%code requires {
    namespace expr { namespace detail {
        class driver;
    } }
}

%param { expr::detail::driver & driver }
%locations
%define parse.error verbose

%{
#include "driver.hpp"
#include <iostream>
%}

%define api.token.prefix {TOK_}
%token
    END 0 "end of file"
    NOT "~"
    AND "/\\"
    OR "\\/"
    XOR "X"
    IMPL "=>"
    EQUIV "<=>"
    EQ "="
    NEQ "!="
    LPAREN "("
    RPAREN ")"
    ERROR "error"
    NEW_LINE "new line"
    COMMA ","
;

%token <int> VARIABLE "variable"
%token <char> FUN_NAME "fun_name"
%type <expr::detail::generic_expr> exp
%type <expr::atom::term> term
%type <std::vector<expr::atom::term>> args

// define left associativity AND priority (ordering is important)
%left NEW_LINE
%left EQUIV
%left IMPL
%left OR XOR
%left AND
%left NOT
%left EQ
%left NEQ

%%
%start unit;
unit: exp { driver.set_root(std::move($1)); }; // give back the result to the driver

args:
  ERROR { YYABORT; }
| args ERROR { YYABORT; }
| term { $$.emplace_back(std::move($1)); }
| args COMMA term { $1.emplace_back(std::move($3)); $$ = std::move($1); }

term:
  ERROR { YYABORT; }
| term ERROR { YYABORT; }
| VARIABLE { $$ = std::move($1); }
| FUN_NAME LPAREN args RPAREN { $$ = expr::atom::fun { $1, std::move($3) }; }
| FUN_NAME { $$ = expr::atom::fun { $1, { } }; }

exp:
  ERROR { YYABORT; }
| exp ERROR { YYABORT; } // used when an invalid character is encountered
| VARIABLE { $$ = expr::detail::generic_atom { $1 }; }
| VARIABLE EQ VARIABLE {
    if (driver.th() != expr::detail::theory::CONGRUENCE)
        $$ = expr::detail::generic_atom { expr::atom::equality { $1, $3 } };
    else
        $$ = expr::detail::generic_atom { expr::atom::congruence_equality { $1, $3 } };
}
| VARIABLE NEQ VARIABLE {
    if (driver.th() != expr::detail::theory::CONGRUENCE)
        $$ = expr::detail::not_<generic_atom> { expr::atom::equality { $1, $3 } };
    else
        $$ = expr::detail::not_<generic_atom> { expr::atom::congruence_equality { $1, $3 } };

}
| term EQ term { $$ = expr::detail::generic_atom { expr::atom::congruence_equality { $1, $3 } }; }
| term NEQ term {
    $$ = expr::detail::not_<generic_atom> { expr::atom::congruence_equality { $1, $3 } };
}
| LPAREN exp RPAREN { $$ = std::move($2); }
| exp AND exp { $$ = expr::detail::and_<generic_atom> { std::move($1), std::move($3) }; }
| exp NEW_LINE exp { $$ = expr::detail::and_<generic_atom> { std::move($1), std::move($3) }; }
| exp OR exp { $$ = expr::detail::or_<generic_atom> { std::move($1), std::move($3) }; }
| exp XOR exp { $$ = expr::detail::xor_<generic_atom> { std::move($1), std::move($3) }; }
| exp IMPL exp { $$ = expr::detail::impl_<generic_atom> { std::move($1), std::move($3) }; }
| exp EQUIV exp { $$ = expr::detail::equiv_<generic_atom> { std::move($1), std::move($3) }; }
| NOT exp { $$ = expr::detail::not_<generic_atom> { std::move($2) }; }

%%

/*
    report errors to the driver
*/
void expr::detail::parser::error(const location_type & l, const std::string & m) {
    driver.error(l, m);
}